#!/usr/bin/env bash
# Re-exec in bash if not already
if [ -z "${BASH_VERSION:-}" ]; then exec bash "$0" "$@"; fi
set -Eeuo pipefail

# -------- helpers --------
log()   { printf "\n[%s] %s\n" "$(date '+%F %T')" "$*"; }
warn()  { printf "\n\033[33m[WARN]\033[0m %s\n" "$*"; }
error() { printf "\n\033[31m[ERROR]\033[0m %s\n" "$*"; }
ask()   { # ask VAR DEFAULT "Prompt text"
  local __var="$1"; shift
  local __def="$1"; shift
  local __prompt="$*"
  local __ans
  read -r -p "${__prompt} [${__def}]: " __ans
  printf -v "$__var" "%s" "${__ans:-$__def}"
}
ask_plain() { # ask_plain VAR "Prompt text" (NOT hidden)
  local __var="$1"; shift
  local __prompt="$*"
  local __ans
  read -r -p "${__prompt}: " __ans
  printf -v "$__var" "%s" "$__ans"
}
ask_secret() { # keep for Grafana password (hidden)
  local __var="$1"; shift
  local __prompt="$*"
  local __ans
  read -r -s -p "${__prompt}: " __ans
  echo
  printf -v "$__var" "%s" "$__ans"
}
require_bin() { command -v "$1" >/dev/null 2>&1 || { error "Missing dependency: $1"; exit 1; }; }
ns_exists()   { kubectl get ns "$1" >/dev/null 2>&1; }

upsert_env() { # upsert_env FILE VAR VALUE
  local file="$1" var="$2" val="$3"
  if grep -qE "^${var}=" "$file"; then
    sed -i "s#^${var}=.*#${var}=${val}#g" "$file"
  else
    echo "${var}=${val}" >> "$file"
  fi
}

env_get() { # env_get FILE VAR -> prints value (may be empty)
  local file="$1" var="$2"
  awk -F= -v v="$var" '$1==v{print substr($0, index($0,$2))}' "$file" 2>/dev/null || true
}

# -------- defaults --------
DEFAULT_KUBECONFIG="${HOME}/k3s-jenkins.yaml"
DEFAULT_NAMESPACE="ci"
DEFAULT_SECRET_NAME="dockerhub-secret"
DEFAULT_EMAIL="devnull@example.com"

# -------- prerequisites --------
require_bin kubectl

log "Configure cluster access"
ask KCONF "$DEFAULT_KUBECONFIG" "Path to kubeconfig to use"
if [[ -f "$KCONF" ]]; then
  export KUBECONFIG="$KCONF"
  log "Using kubeconfig: $KCONF"
else
  warn "Kubeconfig '$KCONF' not found. Will try the current kubectl context."
fi

# Connectivity check
if ! kubectl cluster-info >/dev/null 2>&1; then
  error "Cannot contact Kubernetes cluster (kubectl cluster-info failed). Check KUBECONFIG/current context."
  exit 1
fi
kubectl get nodes -o name || true

# -------- namespace --------
ask NAMESPACE "$DEFAULT_NAMESPACE" "Kubernetes namespace to deploy into"
if ns_exists "$NAMESPACE"; then
  log "Namespace '$NAMESPACE' exists."
else
  log "Creating namespace '$NAMESPACE'..."
  kubectl create namespace "$NAMESPACE"
fi
kubectl auth can-i create deployments -n "$NAMESPACE" >/dev/null 2>&1 || \
  warn "Your current credentials may not have full permissions in '$NAMESPACE'. Applying may fail."

# -------- .env handling --------
SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
REPO_ROOT="$SCRIPT_DIR"
ENV_DIR="$REPO_ROOT/stages/03-k8s-deploy"
ENV_EX="$ENV_DIR/.env.example"
ENV_FILE="$ENV_DIR/.env"

mkdir -p "$ENV_DIR"

if [[ ! -f "$ENV_FILE" ]]; then
  log "Missing $ENV_FILE â€” creating it."
  if [[ -f "$ENV_EX" ]]; then
    cp "$ENV_EX" "$ENV_FILE"
  else
    cat > "$ENV_FILE" <<'EOF'
# ---- autogenerated defaults ----
NAMESPACE=ci

# Images
FETCHER_IMAGE=docker.io/meir25/stockops-fetcher:latest
NEWS_IMAGE=docker.io/meir25/stockops-news:latest
GRAFANA_IMAGE=grafana/grafana:11.3.0
INFLUXDB_IMAGE=influxdb:2.7

# App config
TICKERS=HSBA.L,BP.L,VOD.L,GLEN.L,TSCO.L
NEWS_KEYWORDS=stocks,market,earnings

# Grafana
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=

# InfluxDB
INFLUXDB_BUCKET=stocks
INFLUXDB_ORG=stockops
INFLUXDB_TOKEN=
INFLUXDB_ADMIN_TOKEN=
INFLUXDB_URL=http://influxdb.ci.svc.cluster.local:8086
EOF
  fi
else
  log "Found existing $ENV_FILE"
fi

# Keep namespace consistent
upsert_env "$ENV_FILE" "NAMESPACE" "$NAMESPACE"

# Prompt/auto-fill sensitive/required fields
# Grafana password (hidden)
if [[ -z "$(env_get "$ENV_FILE" "GRAFANA_ADMIN_PASSWORD")" ]]; then
  ask_secret G_PASS "Set Grafana admin password"
  upsert_env "$ENV_FILE" "GRAFANA_ADMIN_PASSWORD" "$G_PASS"
fi

# InfluxDB token(s): generate if empty/missing
if [[ -z "$(env_get "$ENV_FILE" "INFLUXDB_TOKEN")" ]]; then
  TOKEN="$(head -c 32 /dev/urandom | base64)"
  upsert_env "$ENV_FILE" "INFLUXDB_TOKEN" "$TOKEN"
  log "Generated INFLUXDB_TOKEN and saved to .env"
fi
if [[ -z "$(env_get "$ENV_FILE" "INFLUXDB_ADMIN_TOKEN")" ]]; then
  ATOKEN="$(head -c 32 /dev/urandom | base64)"
  upsert_env "$ENV_FILE" "INFLUXDB_ADMIN_TOKEN" "$ATOKEN"
  log "Generated INFLUXDB_ADMIN_TOKEN and saved to .env"
fi

log "Environment prepared at $ENV_FILE"

# -------- registry secret (optional) --------
log "Docker Hub / registry pull secret (optional)"
ask PRIVATE "n" "Are your images private on Docker Hub (y/n)"
if [[ "${PRIVATE,,}" =~ ^y ]]; then
  ask SECRET_NAME "$DEFAULT_SECRET_NAME" "Secret name to create"
  ask DH_USER "" "Docker Hub username"
  # VISIBLE input for token (as requested)
  ask_plain DH_PASS "Docker Hub password / access token (visible)"
  ask DH_EMAIL "$DEFAULT_EMAIL" "Email for Docker Hub secret"

  log "Creating/updating imagePullSecret '$SECRET_NAME' in namespace '$NAMESPACE'..."
  kubectl -n "$NAMESPACE" create secret docker-registry "$SECRET_NAME" \
    --docker-username="$DH_USER" \
    --docker-password="$DH_PASS" \
    --docker-email="$DH_EMAIL" \
    --dry-run=client -o yaml | kubectl apply -f -
  log "Secret '$SECRET_NAME' is ready."
else
  log "Skipping registry secret (assuming public images)."
fi

# -------- run apply.sh --------
APPLY_SCRIPT="$REPO_ROOT/stages/03-k8s-deploy/apply.sh"
if [[ ! -f "$APPLY_SCRIPT" ]]; then
  error "apply.sh not found at $APPLY_SCRIPT"
  exit 1
fi

export NAMESPACE
log "Running apply script..."
bash "$APPLY_SCRIPT"

log "Apply finished. Verifying resources in namespace '$NAMESPACE'..."
kubectl -n "$NAMESPACE" get deploy,svc,pvc,cm,secret --ignore-not-found
kubectl -n "$NAMESPACE" get pods -o wide

cat <<'NEXT_STEPS'

Next steps (optional):
- Watch rollout:     kubectl -n "$NAMESPACE" rollout status deploy/<name>
- View pod logs:     kubectl -n "$NAMESPACE" logs -f deploy/<name>
- Port-forward Grafana: kubectl -n "$NAMESPACE" port-forward svc/grafana 3000:3000
NEXT_STEPS

