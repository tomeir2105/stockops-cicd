apiVersion: batch/v1
kind: Job
metadata:
  name: kaniko-build-fetcher
  namespace: ci
spec:
  backoffLimit: 0
  template:
    metadata:
      labels: { app: kaniko-build-fetcher }
    spec:
      restartPolicy: Never
      imagePullSecrets: [{ name: regcred }]
      initContainers:
        - name: git-and-stage
          image: alpine/git:2.45.2
          env:
            - { name: REPO_URL, value: "__HTTPS_URL__" }   # replaced by run.sh
            - { name: BRANCH,   value: "__BRANCH__" }      # replaced by run.sh
            - name: GITHUB_USER
              valueFrom: { secretKeyRef: { name: git-cred, key: GITHUB_USER, optional: true } }
            - name: GITHUB_TOKEN
              valueFrom: { secretKeyRef: { name: git-cred, key: GITHUB_TOKEN, optional: true } }
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -e
              apk add --no-cache ca-certificates bash
              mkdir -p /src /workspace
              if [ -n "$GITHUB_USER" ] && [ -n "$GITHUB_TOKEN" ]; then
                URL="${REPO_URL/https:\/\//https:\/\/$GITHUB_USER:$GITHUB_TOKEN@}"
              else
                URL="$REPO_URL"
              fi
              git clone --depth=1 --branch "$BRANCH" "$URL" /src

              # find Dockerfile for fetcher; stage so Dockerfile sits at /workspace/Dockerfile
              for c in fetcher apps/fetcher services/fetcher stockops-fetcher src/fetcher .; do
                if [ -f "/src/$c/Dockerfile" ]; then
                  cp -a "/src/$c/." /workspace/
                  exit 0
                fi
              done
              echo "Fetcher Dockerfile not found in expected locations." >&2
              exit 1
          volumeMounts:
            - { name: workspace, mountPath: /workspace }
      containers:
        - name: kaniko
          image: gcr.io/kaniko-project/executor:latest
          env: [{ name: DOCKER_CONFIG, value: /kaniko/.docker/ }]
          args:
            - --context=/workspace
            - --dockerfile=Dockerfile
            - --destination=__DEST_IMAGE__      # replaced by run.sh
            - --single-snapshot
            - --skip-unused-stages=true
            - --use-new-run
            - --cache=true
          volumeMounts:
            - { name: docker-config, mountPath: /kaniko/.docker/ }
            - { name: workspace,     mountPath: /workspace }
      volumes:
        - name: docker-config
          secret:
            secretName: docker-config
            items: [{ key: config.json, path: config.json }]
        - name: workspace
          emptyDir: {}

